/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-08-13 16:59:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class postquestion_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Post Your Doubts</title> <\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<style>\r\n");
      out.write(".form-container {\r\n");
      out.write("	max-width: 400px; /* Adjust the maximum width of the form container */\r\n");
      out.write("	margin: 0 auto; /* Center the form horizontally */\r\n");
      out.write("	padding: 20px; /* Add padding around the form */\r\n");
      out.write("	border: 1px solid #ccc; /* Add a border around the form */\r\n");
      out.write("	border-radius: 5px; /* Add rounded corners to the form */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("label {\r\n");
      out.write("	display: block; /* Display labels as block elements */\r\n");
      out.write("	margin-bottom: 5px; /* Add margin below each label */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"text\"], textarea {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	margin-bottom: 10px;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("textarea {\r\n");
      out.write("	height: 150px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"] {\r\n");
      out.write("	background-color: #007bff;\r\n");
      out.write("	/* Set the background color of the submit button */\r\n");
      out.write("	color: #fff; /* Set the text color of the submit button */\r\n");
      out.write("	padding: 10px 20px; /* Add padding to the submit button */\r\n");
      out.write("	border: none; /* Remove the border */\r\n");
      out.write("	border-radius: 5px; /* Add rounded corners */\r\n");
      out.write("	cursor: pointer; /* Change cursor to pointer on hover */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"]:hover {\r\n");
      out.write("	background-color: #0056b3; /* Change background color on hover */\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"card\">\r\n");
      out.write("		<div class=\"card-header\">\r\n");
      out.write("			<h2>Ask a question by industry leader..!</h2>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"card-body\">\r\n");
      out.write("			<blockquote class=\"blockquote mb-0\">\r\n");
      out.write("				<p>Writing a good question</p>\r\n");
      out.write("				<!-- \r\n");
      out.write("      <p>You are ready to ask a programming-related question and this form will help guide you through the process.\r\n");
      out.write("Looking to ask a non-programming question? See the topics here to find a relevant site.</p> -->\r\n");
      out.write("				<footer class=\"blockquote-footer\">\r\n");
      out.write("					<cite title=\"Source Title\">Summarize your problem in a\r\n");
      out.write("						one-line title.</cite>\r\n");
      out.write("				</footer>\r\n");
      out.write("				<footer class=\"blockquote-footer\">\r\n");
      out.write("					<cite title=\"Source Title\">Describe your problem in more\r\n");
      out.write("						detail.</cite>\r\n");
      out.write("				</footer>\r\n");
      out.write("				<footer class=\"blockquote-footer\">\r\n");
      out.write("					<cite title=\"Source Title\">Describe what you tried and what\r\n");
      out.write("						you expected to happen.</cite>\r\n");
      out.write("				</footer>\r\n");
      out.write("				<footer class=\"blockquote-footer\">\r\n");
      out.write("					<cite title=\"Source Title\">add tags which help surface your\r\n");
      out.write("						question to members of the community.</cite>\r\n");
      out.write("				</footer>\r\n");
      out.write("			</blockquote>\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<a href=\"All-posted-doubts\" class=\"btn btn-primary\">View All\r\n");
      out.write("			Posted Doubts</a>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"form-container\">\r\n");
      out.write("		<form action=\"submitdoubts\" method=\"POST\">\r\n");
      out.write("			<label>Title:</label><br> <input type=\"text\" name=\"title\"\r\n");
      out.write("				required=\"required\"><br> <label>What are the\r\n");
      out.write("				details of your problem?</label><br>\r\n");
      out.write("			<textarea name=\"details\" required=\"required\"></textarea>\r\n");
      out.write("			<br> <label>What did you try and what were you\r\n");
      out.write("				expecting?</label><br>\r\n");
      out.write("			<textarea name=\"expectation\" required=\"required\"></textarea>\r\n");
      out.write("			<br> <label>Tags</label><br> <input type=\"text\" name=\"tags\"\r\n");
      out.write("				required=\"required\"><br> <input type=\"submit\"\r\n");
      out.write("				class=\"btn btn-primary\" value=\"Submit\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
