/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-08-14 14:06:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import doubtdao.DoubtsDao;
import entities.QuestionPostEntity;
import java.util.List;

public final class alldoubtandsolution_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("doubtdao.DoubtsDao");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("entities.QuestionPostEntity");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>View All Solutions With Doubts</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	font-family: Arial, sans-serif;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".solution-card {\r\n");
      out.write("	border: 1px solid #ddd;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	margin-bottom: 20px;\r\n");
      out.write("	background-color: #f9f9f9;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".solution-card h3 {\r\n");
      out.write("	margin-top: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".solution-card p {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	margin-bottom: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".thumbs-container {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".thumb-icon {\r\n");
      out.write("	font-size: 24px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	margin-right: 10px;\r\n");
      out.write("	transition: transform 0.2s ease-in-out;\r\n");
      out.write("	border: none; /* Remove button border */\r\n");
      out.write("	background: none; /* Remove button background */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".thumb-icon:hover {\r\n");
      out.write("	transform: scale(1.2); /* Scale up on hover */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".like-icon {\r\n");
      out.write("	color: #4CAF50; /* Green color for thumbs up */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".dislike-icon {\r\n");
      out.write("	color: #f44336; /* Red color for thumbs down */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".like-count, .dislike-count {\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("	margin-left: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".load-more-btn {\r\n");
      out.write("	background-color: #4CAF50;\r\n");
      out.write("	color: white;\r\n");
      out.write("	padding: 10px 20px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".load-more-btn:hover {\r\n");
      out.write("	background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

	List<QuestionPostEntity> list = (List<QuestionPostEntity>) request.getAttribute("alldoubts");
	for (QuestionPostEntity ope : list) {
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"solution-card\">\r\n");
      out.write("		<h3>Solution of that problem......</h3>\r\n");
      out.write("		<p>\r\n");
      out.write("			<strong>Doubt ID: </strong>");
      out.print(ope.getId());
      out.write("</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<strong>Title: </strong>");
      out.print(ope.getTitle());
      out.write("\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<strong>Detail Problem: </strong>");
      out.print(ope.getTitle());
      out.write("</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<strong>Expecting: </strong>");
      out.print(ope.getExpectation());
      out.write("</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<strong>Tag: </strong>");
      out.print(ope.getTags());
      out.write("</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<strong>Posted At: </strong>");
      out.print(ope.getCretaedAt());
      out.write("</p>\r\n");
      out.write("		");

		if (ope.getSolution() == null) {
		
      out.write("\r\n");
      out.write("		<p>\r\n");
      out.write("			<strong>Solution: </strong>Solution to be posted soon.....\r\n");
      out.write("		</p>\r\n");
      out.write("		");

		} else {
		
      out.write("\r\n");
      out.write("		<p>\r\n");
      out.write("			<strong>Solution: </strong>");
      out.print(ope.getSolution());
      out.write("</p>\r\n");
      out.write("		");

		}
		
      out.write("\r\n");
      out.write("		<div class=\"thumbs-container\">\r\n");
      out.write("			<!-- Thumbs up icon with form to like the solution -->\r\n");
      out.write("			<form action=\"likesolution/");
      out.print(ope.getId());
      out.write("/like\" method=\"POST\">\r\n");
      out.write("				<input type=\"hidden\" name=\"id\" value=\"\">\r\n");
      out.write("				");
      out.print(ope.getLikeSolution());
      out.write("\r\n");
      out.write("				<button type=\"submit\" class=\"thumb-icon like-icon\">&#128077;</button>\r\n");
      out.write("			</form>\r\n");
      out.write("\r\n");
      out.write("			<form action=\"dislikesolution/");
      out.print(ope.getId());
      out.write("/dislike\"\r\n");
      out.write("				method=\"POST\">\r\n");
      out.write("				<input type=\"hidden\" name=\"id\" value=\"\">");
      out.print(ope.getDisLikeSolution());
      out.write("\r\n");
      out.write("				<button type=\"submit\" class=\"thumb-icon dislike-icon\">&#128078;</button>\r\n");
      out.write("			</form>\r\n");
      out.write("\r\n");
      out.write("			<span class=\"like-count\"></span> <span class=\"dislike-count\"></span>\r\n");
      out.write("		</div>\r\n");
      out.write("		<a href=\"report-issue\" class=\"btn btn-sm bg-danger text-white\">Is\r\n");
      out.write("			there any mistake.?</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	");

	System.out.print("total count" + ope.getLikeSolution());

	System.out.println("total dis" + ope.getDisLikeSolution());
	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
