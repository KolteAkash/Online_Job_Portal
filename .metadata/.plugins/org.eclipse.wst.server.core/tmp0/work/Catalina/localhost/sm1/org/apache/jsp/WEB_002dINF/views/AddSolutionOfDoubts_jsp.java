/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-08-15 09:17:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import entities.QuestionPostEntity;
import java.awt.geom.QuadCurve2D;
import java.util.List;

public final class AddSolutionOfDoubts_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("entities.QuestionPostEntity");
    _jspx_imports_classes.add("java.awt.geom.QuadCurve2D");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>Add Solution</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	font-family: Arial, sans-serif;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	background-color: #f5f5f5;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	max-width: 600px;\r\n");
      out.write("	margin: 50px auto;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	background-color: #fff;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h2 {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	margin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("label {\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"text\"], input[type=\"number\"], textarea, input[type=\"datetime-local\"],\r\n");
      out.write("	input[type=\"submit\"] {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	margin-bottom: 20px;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("textarea {\r\n");
      out.write("	height: 100px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"] {\r\n");
      out.write("	background-color: #4caf50;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"]:hover {\r\n");
      out.write("	background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		");

		List<QuestionPostEntity> list = (List<QuestionPostEntity>) request.getAttribute("alldoubts");
		for (QuestionPostEntity ope : list) {
		
      out.write("\r\n");
      out.write("		<h2>\r\n");
      out.write("			Add Solution For ID:-\r\n");
      out.write("			");
      out.print(ope.getId());
      out.write("</h2>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<form action=\"http://localhost:8879/sm1/admin-add-solution-doubts\"\r\n");
      out.write("			method=\"POST\">\r\n");
      out.write("			<input type=\"hidden\" name=\"id\" value=\"");
      out.print(ope.getId());
      out.write("\"> <label\r\n");
      out.write("				for=\"title\">Title:</label><br> <input type=\"text\" id=\"title\"\r\n");
      out.write("				name=\"title\" value=\"");
      out.print(ope.getTitle());
      out.write("\" required><br>\r\n");
      out.write("\r\n");
      out.write("			<label for=\"problemDetail\">Problem Detail:</label><br>\r\n");
      out.write("			<textarea id=\"problemDetail\" name=\"details\" rows=\"4\" cols=\"50\"\r\n");
      out.write("				required>");
      out.print(ope.getDetails());
      out.write("\"</textarea>\r\n");
      out.write("			<br> <label for=\"expecting\">Expecting:</label><br> <input\r\n");
      out.write("				type=\"text\" id=\"expecting\" name=\"expectation\"\r\n");
      out.write("				value=\"");
      out.print(ope.getExpectation());
      out.write("\"><br> <label\r\n");
      out.write("				for=\"tags\">Tags:</label><br> <input type=\"text\" id=\"tags\"\r\n");
      out.write("				name=\"tags\" value=\"");
      out.print(ope.getTags());
      out.write("\"><br> <label\r\n");
      out.write("				for=\"solution\">Solution:</label><br>\r\n");
      out.write("			<textarea id=\"solution\" name=\"solution\" rows=\"4\" cols=\"50\" required>");
      out.print(ope.getSolution());
      out.write(" </textarea>\r\n");
      out.write("			<br> <label for=\"createdAt\">Created At:</label><br> <input\r\n");
      out.write("				type=\"datetime-local\" id=\"createdAt\" name=\"cretaedAt\"\r\n");
      out.write("				value=\"");
      out.print(ope.getCretaedAt());
      out.write("\" required><br> <label\r\n");
      out.write("				for=\"likes\">Likes:</label><br> <input type=\"number\" id=\"likes\"\r\n");
      out.write("				name=\"likeSolution\" value=\"0\" value=\"");
      out.print(ope.getLikeSolution());
      out.write("\"\r\n");
      out.write("				required><br> <label for=\"dislikes\">Dislikes:</label><br>\r\n");
      out.write("			<input type=\"number\" id=\"dislikes\" name=\"disLikeSolution\" value=\"0\"\r\n");
      out.write("				value=\"");
      out.print(ope.getDisLikeSolution());
      out.write("\" required><br> <input\r\n");
      out.write("				type=\"submit\" value=\"Submit\">\r\n");
      out.write("\r\n");
      out.write("		</form>\r\n");
      out.write("		");

		}
		
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
