/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-08-15 08:58:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import entities.AllCourses;

public final class editCource_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-6.1.0.jar", Long.valueOf(1723712203372L));
    _jspx_dependants.put("jar:file:/C:/Users/asus/OneDrive/Desktop/7m_Mentor_Project/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/sm1/WEB-INF/lib/spring-webmvc-6.1.0.jar!/META-INF/spring-form.tld", Long.valueOf(1723459762000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("entities.AllCourses");
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

List<AllCourses> list = (List<AllCourses>) request.getAttribute("courcebyid");
String messages = (String) session.getAttribute("adminMsg");
if (messages == null) {

      if (true) {
        _jspx_page_context.forward("adminlogindoubt.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>Edit Course Information</title>\r\n");
      out.write("<style>\r\n");
      out.write("label {\r\n");
      out.write("	display: block;\r\n");
      out.write("	margin-bottom: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"text\"], textarea {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	padding: 8px;\r\n");
      out.write("	margin-bottom: 10px;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	border-radius: 4px;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"] {\r\n");
      out.write("	background-color: #007bff;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	padding: 10px 20px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 4px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"]:hover {\r\n");
      out.write("	background-color: #0056b3;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

	for (AllCourses ac : list) {
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<h2>\r\n");
      out.write("		Edit Course Information ID:\r\n");
      out.write("		");
      out.print(ac.getId());
      out.write("</h2>\r\n");
      out.write("	<form method=\"post\"\r\n");
      out.write("		action=\"http://localhost:8879/sm/update-course-admin\">\r\n");
      out.write("\r\n");
      out.write("		<input type=\"hidden\" name=\"id\" value=\"");
      out.print(ac.getId());
      out.write("\"> <label\r\n");
      out.write("			for=\"cname\">Course Name:</label> <input type=\"text\" id=\"cname\"\r\n");
      out.write("			name=\"cName\" value=\"");
      out.print(ac.getcName());
      out.write("\" required> <label\r\n");
      out.write("			for=\"cdescription\">Description:</label>\r\n");
      out.write("		<textarea id=\"cdescription\" name=\"cDescription\" required>");
      out.print(ac.getcDescription());
      out.write("</textarea>\r\n");
      out.write("\r\n");
      out.write("		<label for=\"cposttime\">Post Time:</label> <input type=\"text\"\r\n");
      out.write("			id=\"cPost\" name=\"cPost\" value=\"");
      out.print(ac.getcPost());
      out.write("\" required>\r\n");
      out.write("\r\n");
      out.write("		<label for=\"cinstructor\">Instructor:</label> <input type=\"text\"\r\n");
      out.write("			id=\"cinstructor\" name=\"cInstructor\"\r\n");
      out.write("			value=\"");
      out.print(ac.getcInstructor());
      out.write("\" required> <label\r\n");
      out.write("			for=\"cexperience\">Experience:</label> <input type=\"text\"\r\n");
      out.write("			id=\"cexperience\" name=\"cExperience\" value=\"");
      out.print(ac.getcExperience());
      out.write("\"\r\n");
      out.write("			required> <label for=\"instructorinfo\">Instructor\r\n");
      out.write("			Info:</label>\r\n");
      out.write("		<textarea id=\"instructorinfo\" name=\"instructorInfo\" required>");
      out.print(ac.getInstructorInfo());
      out.write("</textarea>\r\n");
      out.write("\r\n");
      out.write("		<label for=\"img\">Image Link:</label> <input type=\"text\" id=\"img\"\r\n");
      out.write("			name=\"img\" value=\"");
      out.print(ac.getImg());
      out.write("\" required> <label\r\n");
      out.write("			for=\"price\">Price:</label> <input type=\"number\" id=\"price\"\r\n");
      out.write("			name=\"price\" value=\"");
      out.print(ac.getPrice());
      out.write("\" required\r\n");
      out.write("			oninput=\"this.value = Math.abs(this.value)\"> <input\r\n");
      out.write("			type=\"submit\" value=\"Update Course\">\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("	");

	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
